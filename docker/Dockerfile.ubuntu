ARG BASEIMAGE=nvcr.io/nvidia/cuda:12.4.1-base-ubuntu22.04

FROM --platform=$BUILDPLATFORM ubuntu:18.04 as builder

ARG GOLANG_VERSION=1.22.2

WORKDIR /go/src/github.com/NVIDIA/dcgm-exporter
RUN apt-get update \
	&& apt-get install -y --no-install-recommends \
	wget \
	ca-certificates \
	git \
	build-essential \
	gcc \
	gcc-aarch64-linux-gnu \
	qemu-user \
	qemu-system-arm \
	libc6-dev-arm64-cross \
	&& apt-get autoremove -y \
	&& rm -rf /var/lib/apt/lists/* \
	&& ln -sf /usr/aarch64-linux-gnu/lib/ld-linux-aarch64.so.1 /lib/ld-linux-aarch64.so.1

RUN set -eux; \
	arch="$(dpkg --print-architecture)"; arch="${arch##*-}"; \
	url=; \
	case "$arch" in \
	'amd64') \
	url="https://dl.google.com/go/go${GOLANG_VERSION}.linux-amd64.tar.gz"; \
	;; \
	'arm64') \
	url="https://dl.google.com/go/go${GOLANG_VERSION}.linux-arm64.tar.gz"; \
	;; \
	*) echo >&2 "error: unsupported architecture '$arch' (likely packaging update needed)"; exit 1 ;; \
	esac; \
	wget -O go.tgz "$url" --progress=dot:giga; \
	tar -C /usr/local -xzf go.tgz; \
	rm go.tgz;
ENV GOTOOLCHAIN=local
ENV GOPATH /go
ENV PATH $GOPATH/bin:$PATH
RUN mkdir -p "$GOPATH/src" "$GOPATH/bin" && chmod -R 1777 "$GOPATH"
ENV PATH $PATH:/usr/local/go/bin
COPY . .
ARG TARGETOS
ARG TARGETARCH
RUN --mount=type=cache,target=/root/.cache/go-build \
	--mount=type=cache,target=/go/pkg \
	# when building aarch64 we have to target aarch64-linux-gnu-gcc compiler
	if [ "$TARGETARCH" = "arm64" ]; then \
	export CC=aarch64-linux-gnu-gcc; \
	export LD_LIBRARY_PATH=/usr/aarch64-linux-gnu/lib:$LD_LIBRARY_PATH; \
	fi && \
	GOOS=$TARGETOS GOARCH=$TARGETARCH CC=$CC CGO_ENABLED=1 make install

FROM ${BASEIMAGE}

ARG VERSION
ARG DCGM_VERSION
ARG DIST_DIR

LABEL io.k8s.display-name="NVIDIA DCGM Exporter"
LABEL name="NVIDIA DCGM Exporter"
LABEL vendor="NVIDIA"
LABEL version="${VERSION}"
LABEL release="N/A"
LABEL summary="Exports GPU Metrics to Prometheus"
LABEL description="See summary"

COPY ./LICENSE ./licenses/LICENSE
COPY --from=builder /usr/bin/dcgm-exporter /usr/bin/
COPY etc /etc/dcgm-exporter

RUN apt-get update && apt-get install -y --no-install-recommends \
	datacenter-gpu-manager=1:${DCGM_VERSION} libcap2-bin && apt-get purge --autoremove -y openssl \
	&& apt-get -y clean \
	&& apt-get -y autoclean \
	&& apt-get autoremove -y \
	&& rm -rfd /usr/local/dcgm/bindings /usr/local/dcgm/sdk_samples /usr/share/nvidia-validation-suite \
	# DCGM exporter doesn't use libdcgm_cublas_proxy*.so.
	&& rm -rf /usr/lib/x86_64-linux-gnu/libdcgm_cublas_proxy*.so \
	&& rm -rf /usr/local/dcgm/scripts \
	&& rm -f /usr/include/*.h /usr/bin/DcgmProfTesterKernels.ptx /usr/bin/dcgmproftester* \
	&& rm -rf /var/cache/debconf/* /var/lib/apt/lists/* /var/log/* /tmp/* /var/tmp/* \
	&& rm -rf /usr/share/doc && rm -rf /usr/share/man
# Required for DCP metrics
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility,compat32
# disable all constraints on the configurations required by NVIDIA container toolkit
ENV NVIDIA_DISABLE_REQUIRE="true"
ENV NVIDIA_VISIBLE_DEVICES=all

ENV NO_SETCAP=
COPY docker/dcgm-exporter-entrypoint.sh /usr/local/dcgm/dcgm-exporter-entrypoint.sh
RUN chmod +x /usr/local/dcgm/dcgm-exporter-entrypoint.sh

ENTRYPOINT ["/usr/local/dcgm/dcgm-exporter-entrypoint.sh"]
