ARG BASEIMAGE=nvcr.io/nvidia/cuda:12.4.1-base-ubi9

FROM --platform=$BUILDPLATFORM ubuntu:18.04 as builder

ARG GOLANG_VERSION=1.22.2

WORKDIR /go/src/github.com/NVIDIA/dcgm-exporter
RUN --mount=type=cache,sharing=locked,target=/var/cache/apt \
	apt-get update \
	&& apt-get install -y --no-install-recommends \
	wget \
	ca-certificates \
	git \
	build-essential \
	gcc \
	gcc-aarch64-linux-gnu \
	qemu-user \
	qemu-system-arm \
	libc6-dev-arm64-cross \
	&& apt-get autoremove -y \
	&& rm -rf /var/lib/apt/lists/*

RUN set -eux; \
	arch="$(dpkg --print-architecture)"; arch="${arch##*-}"; \
	url=; \
	case "$arch" in \
		'amd64') \
			url="https://dl.google.com/go/go${GOLANG_VERSION}.linux-amd64.tar.gz"; \
			;; \
		'arm64') \
			url="https://dl.google.com/go/go${GOLANG_VERSION}.linux-arm64.tar.gz"; \
			;; \
		*) echo >&2 "error: unsupported architecture '$arch' (likely packaging update needed)"; exit 1 ;; \
	esac; \
	wget -O go.tgz "$url" --progress=dot:giga; \
	tar -C /usr/local -xzf go.tgz; \
	rm go.tgz;
ENV GOTOOLCHAIN=local
ENV GOPATH /go
ENV PATH $GOPATH/bin:$PATH
RUN mkdir -p "$GOPATH/src" "$GOPATH/bin" && chmod -R 1777 "$GOPATH"
ENV PATH $PATH:/usr/local/go/bin
COPY . .

RUN --mount=type=cache,target=/root/.cache/go-build \
	--mount=type=cache,target=/go/pkg \
	# when building aarch64 we have to target aarch64-linux-gnu-gcc compiler
	if [ "$TARGETARCH" = "arm64" ]; then \
	export CC=aarch64-linux-gnu-gcc; \
	export LD_LIBRARY_PATH=/usr/aarch64-linux-gnu/lib:$LD_LIBRARY_PATH; \
	fi && \
	GOOS=$TARGETOS GOARCH=$TARGETARCH CC=$CC CGO_ENABLED=1 make binary


FROM ${BASEIMAGE}
ARG DCGM_VERSION
ARG VERSION
ARG DIST_DIR

LABEL io.k8s.display-name="NVIDIA DCGM Exporter"

ARG DCGM_VERSION

RUN dnf update --disablerepo=* --enablerepo=ubi-9-appstream-rpms --enablerepo=ubi-9-baseos-rpms -y && rm -rf /var/cache/yum \
	&& dnf clean expire-cache && dnf install -y datacenter-gpu-manager-${DCGM_VERSION} libcap \
	&& rm -rfd /usr/local/dcgm/bindings /usr/local/dcgm/sdk_samples /usr/share/nvidia-validation-suite

COPY ./LICENSE ./licenses/LICENSE
COPY --from=builder /go/src/github.com/NVIDIA/dcgm-exporter/cmd/dcgm-exporter/dcgm-exporter /usr/bin/
COPY etc /etc/dcgm-exporter

ENV NVIDIA_VISIBLE_DEVICES=all
# disable all constraints on the configurations required by NVIDIA container toolkit
ENV NVIDIA_DISABLE_REQUIRE="true"
# Required for DCP metrics
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility,compat32

ENV NO_SETCAP=
COPY docker/dcgm-exporter-entrypoint.sh /usr/local/dcgm/dcgm-exporter-entrypoint.sh
RUN chmod +x /usr/local/dcgm/dcgm-exporter-entrypoint.sh

ENTRYPOINT ["/usr/local/dcgm/dcgm-exporter-entrypoint.sh"]
