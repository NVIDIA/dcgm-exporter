// Copyright (c) 2024, NVIDIA CORPORATION.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NVIDIA/dcgm-exporter/internal/pkg/transformation (interfaces: Transform)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/pkg/transformations/mock_transformer.go -package=transformation -copyright_file=../../../hack/header.txt . Transform
//

// Package transformation is a generated GoMock package.
package transformation

import (
	reflect "reflect"

	collector "github.com/NVIDIA/dcgm-exporter/internal/pkg/collector"
	deviceinfo "github.com/NVIDIA/dcgm-exporter/internal/pkg/deviceinfo"
	gomock "go.uber.org/mock/gomock"
)

// MockTransform is a mock of Transform interface.
type MockTransform struct {
	ctrl     *gomock.Controller
	recorder *MockTransformMockRecorder
	isgomock struct{}
}

// MockTransformMockRecorder is the mock recorder for MockTransform.
type MockTransformMockRecorder struct {
	mock *MockTransform
}

// NewMockTransform creates a new mock instance.
func NewMockTransform(ctrl *gomock.Controller) *MockTransform {
	mock := &MockTransform{ctrl: ctrl}
	mock.recorder = &MockTransformMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransform) EXPECT() *MockTransformMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockTransform) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockTransformMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockTransform)(nil).Name))
}

// Process mocks base method.
func (m *MockTransform) Process(metrics collector.MetricsByCounter, deviceInfo deviceinfo.Provider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", metrics, deviceInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockTransformMockRecorder) Process(metrics, deviceInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockTransform)(nil).Process), metrics, deviceInfo)
}
