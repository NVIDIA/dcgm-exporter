// Copyright (c) 2024, NVIDIA CORPORATION.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NVIDIA/dcgm-exporter/internal/pkg/nvmlprovider (interfaces: NVML)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/pkg/nvmlprovider/mock_client.go -package=nvmlprovider -copyright_file=../../../hack/header.txt . NVML
//

// Package nvmlprovider is a generated GoMock package.
package nvmlprovider

import (
	reflect "reflect"

	nvmlprovider "github.com/NVIDIA/dcgm-exporter/internal/pkg/nvmlprovider"
	gomock "go.uber.org/mock/gomock"
)

// MockNVML is a mock of NVML interface.
type MockNVML struct {
	ctrl     *gomock.Controller
	recorder *MockNVMLMockRecorder
	isgomock struct{}
}

// MockNVMLMockRecorder is the mock recorder for MockNVML.
type MockNVMLMockRecorder struct {
	mock *MockNVML
}

// NewMockNVML creates a new mock instance.
func NewMockNVML(ctrl *gomock.Controller) *MockNVML {
	mock := &MockNVML{ctrl: ctrl}
	mock.recorder = &MockNVMLMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNVML) EXPECT() *MockNVMLMockRecorder {
	return m.recorder
}

// Cleanup mocks base method.
func (m *MockNVML) Cleanup() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cleanup")
}

// Cleanup indicates an expected call of Cleanup.
func (mr *MockNVMLMockRecorder) Cleanup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockNVML)(nil).Cleanup))
}

// GetMIGDeviceInfoByID mocks base method.
func (m *MockNVML) GetMIGDeviceInfoByID(arg0 string) (*nvmlprovider.MIGDeviceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMIGDeviceInfoByID", arg0)
	ret0, _ := ret[0].(*nvmlprovider.MIGDeviceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMIGDeviceInfoByID indicates an expected call of GetMIGDeviceInfoByID.
func (mr *MockNVMLMockRecorder) GetMIGDeviceInfoByID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMIGDeviceInfoByID", reflect.TypeOf((*MockNVML)(nil).GetMIGDeviceInfoByID), arg0)
}
