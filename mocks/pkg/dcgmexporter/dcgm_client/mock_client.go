// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NVIDIA/dcgm-exporter/pkg/dcgmexporter/dcgm_client (interfaces: DCGMClient)
//
// Generated by this command:
//
//	mockgen -destination=mocks/pkg/dcgmexporter/dcgm_client/mock_client.go github.com/NVIDIA/dcgm-exporter/pkg/dcgmexporter/dcgm_client DCGMClient
//

// Package mock_dcgm_client is a generated GoMock package.
package mock_dcgm_client

import (
	reflect "reflect"
	time "time"

	dcgm "github.com/NVIDIA/go-dcgm/pkg/dcgm"
	gomock "go.uber.org/mock/gomock"
)

// MockDCGMClient is a mock of DCGMClient interface.
type MockDCGMClient struct {
	ctrl     *gomock.Controller
	recorder *MockDCGMClientMockRecorder
}

// MockDCGMClientMockRecorder is the mock recorder for MockDCGMClient.
type MockDCGMClientMockRecorder struct {
	mock *MockDCGMClient
}

// NewMockDCGMClient creates a new mock instance.
func NewMockDCGMClient(ctrl *gomock.Controller) *MockDCGMClient {
	mock := &MockDCGMClient{ctrl: ctrl}
	mock.recorder = &MockDCGMClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDCGMClient) EXPECT() *MockDCGMClientMockRecorder {
	return m.recorder
}

// AddEntityToGroup mocks base method.
func (m *MockDCGMClient) AddEntityToGroup(arg0 dcgm.GroupHandle, arg1 dcgm.Field_Entity_Group, arg2 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEntityToGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEntityToGroup indicates an expected call of AddEntityToGroup.
func (mr *MockDCGMClientMockRecorder) AddEntityToGroup(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEntityToGroup", reflect.TypeOf((*MockDCGMClient)(nil).AddEntityToGroup), arg0, arg1, arg2)
}

// AddLinkEntityToGroup mocks base method.
func (m *MockDCGMClient) AddLinkEntityToGroup(arg0 dcgm.GroupHandle, arg1, arg2 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLinkEntityToGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLinkEntityToGroup indicates an expected call of AddLinkEntityToGroup.
func (mr *MockDCGMClientMockRecorder) AddLinkEntityToGroup(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLinkEntityToGroup", reflect.TypeOf((*MockDCGMClient)(nil).AddLinkEntityToGroup), arg0, arg1, arg2)
}

// Cleanup mocks base method.
func (m *MockDCGMClient) Cleanup() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cleanup")
}

// Cleanup indicates an expected call of Cleanup.
func (mr *MockDCGMClientMockRecorder) Cleanup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockDCGMClient)(nil).Cleanup))
}

// CreateGroup mocks base method.
func (m *MockDCGMClient) CreateGroup(arg0 string) (dcgm.GroupHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", arg0)
	ret0, _ := ret[0].(dcgm.GroupHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockDCGMClientMockRecorder) CreateGroup(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockDCGMClient)(nil).CreateGroup), arg0)
}

// DestroyGroup mocks base method.
func (m *MockDCGMClient) DestroyGroup(arg0 dcgm.GroupHandle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyGroup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyGroup indicates an expected call of DestroyGroup.
func (mr *MockDCGMClientMockRecorder) DestroyGroup(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyGroup", reflect.TypeOf((*MockDCGMClient)(nil).DestroyGroup), arg0)
}

// EntitiesGetLatestValues mocks base method.
func (m *MockDCGMClient) EntitiesGetLatestValues(arg0 []dcgm.GroupEntityPair, arg1 []dcgm.Short, arg2 uint) ([]dcgm.FieldValue_v2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EntitiesGetLatestValues", arg0, arg1, arg2)
	ret0, _ := ret[0].([]dcgm.FieldValue_v2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EntitiesGetLatestValues indicates an expected call of EntitiesGetLatestValues.
func (mr *MockDCGMClientMockRecorder) EntitiesGetLatestValues(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EntitiesGetLatestValues", reflect.TypeOf((*MockDCGMClient)(nil).EntitiesGetLatestValues), arg0, arg1, arg2)
}

// EntityGetLatestValues mocks base method.
func (m *MockDCGMClient) EntityGetLatestValues(arg0 dcgm.Field_Entity_Group, arg1 uint, arg2 []dcgm.Short) ([]dcgm.FieldValue_v1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EntityGetLatestValues", arg0, arg1, arg2)
	ret0, _ := ret[0].([]dcgm.FieldValue_v1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EntityGetLatestValues indicates an expected call of EntityGetLatestValues.
func (mr *MockDCGMClientMockRecorder) EntityGetLatestValues(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EntityGetLatestValues", reflect.TypeOf((*MockDCGMClient)(nil).EntityGetLatestValues), arg0, arg1, arg2)
}

// FieldGetById mocks base method.
func (m *MockDCGMClient) FieldGetById(arg0 dcgm.Short) dcgm.FieldMeta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FieldGetById", arg0)
	ret0, _ := ret[0].(dcgm.FieldMeta)
	return ret0
}

// FieldGetById indicates an expected call of FieldGetById.
func (mr *MockDCGMClientMockRecorder) FieldGetById(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FieldGetById", reflect.TypeOf((*MockDCGMClient)(nil).FieldGetById), arg0)
}

// FieldGroupCreate mocks base method.
func (m *MockDCGMClient) FieldGroupCreate(arg0 string, arg1 []dcgm.Short) (dcgm.FieldHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FieldGroupCreate", arg0, arg1)
	ret0, _ := ret[0].(dcgm.FieldHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FieldGroupCreate indicates an expected call of FieldGroupCreate.
func (mr *MockDCGMClientMockRecorder) FieldGroupCreate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FieldGroupCreate", reflect.TypeOf((*MockDCGMClient)(nil).FieldGroupCreate), arg0, arg1)
}

// FieldGroupDestroy mocks base method.
func (m *MockDCGMClient) FieldGroupDestroy(arg0 dcgm.FieldHandle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FieldGroupDestroy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// FieldGroupDestroy indicates an expected call of FieldGroupDestroy.
func (mr *MockDCGMClientMockRecorder) FieldGroupDestroy(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FieldGroupDestroy", reflect.TypeOf((*MockDCGMClient)(nil).FieldGroupDestroy), arg0)
}

// GetAllDeviceCount mocks base method.
func (m *MockDCGMClient) GetAllDeviceCount() (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDeviceCount")
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDeviceCount indicates an expected call of GetAllDeviceCount.
func (mr *MockDCGMClientMockRecorder) GetAllDeviceCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDeviceCount", reflect.TypeOf((*MockDCGMClient)(nil).GetAllDeviceCount))
}

// GetCpuHierarchy mocks base method.
func (m *MockDCGMClient) GetCpuHierarchy() (dcgm.CpuHierarchy_v1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCpuHierarchy")
	ret0, _ := ret[0].(dcgm.CpuHierarchy_v1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCpuHierarchy indicates an expected call of GetCpuHierarchy.
func (mr *MockDCGMClientMockRecorder) GetCpuHierarchy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCpuHierarchy", reflect.TypeOf((*MockDCGMClient)(nil).GetCpuHierarchy))
}

// GetDeviceInfo mocks base method.
func (m *MockDCGMClient) GetDeviceInfo(arg0 uint) (dcgm.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceInfo", arg0)
	ret0, _ := ret[0].(dcgm.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceInfo indicates an expected call of GetDeviceInfo.
func (mr *MockDCGMClientMockRecorder) GetDeviceInfo(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceInfo", reflect.TypeOf((*MockDCGMClient)(nil).GetDeviceInfo), arg0)
}

// GetEntityGroupEntities mocks base method.
func (m *MockDCGMClient) GetEntityGroupEntities(arg0 dcgm.Field_Entity_Group) ([]uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityGroupEntities", arg0)
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityGroupEntities indicates an expected call of GetEntityGroupEntities.
func (mr *MockDCGMClientMockRecorder) GetEntityGroupEntities(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityGroupEntities", reflect.TypeOf((*MockDCGMClient)(nil).GetEntityGroupEntities), arg0)
}

// GetGpuInstanceHierarchy mocks base method.
func (m *MockDCGMClient) GetGpuInstanceHierarchy() (dcgm.MigHierarchy_v2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGpuInstanceHierarchy")
	ret0, _ := ret[0].(dcgm.MigHierarchy_v2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGpuInstanceHierarchy indicates an expected call of GetGpuInstanceHierarchy.
func (mr *MockDCGMClientMockRecorder) GetGpuInstanceHierarchy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGpuInstanceHierarchy", reflect.TypeOf((*MockDCGMClient)(nil).GetGpuInstanceHierarchy))
}

// GetNvLinkLinkStatus mocks base method.
func (m *MockDCGMClient) GetNvLinkLinkStatus() ([]dcgm.NvLinkStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNvLinkLinkStatus")
	ret0, _ := ret[0].([]dcgm.NvLinkStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNvLinkLinkStatus indicates an expected call of GetNvLinkLinkStatus.
func (mr *MockDCGMClientMockRecorder) GetNvLinkLinkStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNvLinkLinkStatus", reflect.TypeOf((*MockDCGMClient)(nil).GetNvLinkLinkStatus))
}

// GetSupportedDevices mocks base method.
func (m *MockDCGMClient) GetSupportedDevices() ([]uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedDevices")
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupportedDevices indicates an expected call of GetSupportedDevices.
func (mr *MockDCGMClientMockRecorder) GetSupportedDevices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedDevices", reflect.TypeOf((*MockDCGMClient)(nil).GetSupportedDevices))
}

// GetSupportedMetricGroups mocks base method.
func (m *MockDCGMClient) GetSupportedMetricGroups(arg0 uint) ([]dcgm.MetricGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedMetricGroups", arg0)
	ret0, _ := ret[0].([]dcgm.MetricGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupportedMetricGroups indicates an expected call of GetSupportedMetricGroups.
func (mr *MockDCGMClientMockRecorder) GetSupportedMetricGroups(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedMetricGroups", reflect.TypeOf((*MockDCGMClient)(nil).GetSupportedMetricGroups), arg0)
}

// GetValuesSince mocks base method.
func (m *MockDCGMClient) GetValuesSince(arg0 dcgm.GroupHandle, arg1 dcgm.FieldHandle, arg2 time.Time) ([]dcgm.FieldValue_v2, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValuesSince", arg0, arg1, arg2)
	ret0, _ := ret[0].([]dcgm.FieldValue_v2)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetValuesSince indicates an expected call of GetValuesSince.
func (mr *MockDCGMClientMockRecorder) GetValuesSince(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValuesSince", reflect.TypeOf((*MockDCGMClient)(nil).GetValuesSince), arg0, arg1, arg2)
}

// GroupAllGPUs mocks base method.
func (m *MockDCGMClient) GroupAllGPUs() dcgm.GroupHandle {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupAllGPUs")
	ret0, _ := ret[0].(dcgm.GroupHandle)
	return ret0
}

// GroupAllGPUs indicates an expected call of GroupAllGPUs.
func (mr *MockDCGMClientMockRecorder) GroupAllGPUs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupAllGPUs", reflect.TypeOf((*MockDCGMClient)(nil).GroupAllGPUs))
}

// LinkGetLatestValues mocks base method.
func (m *MockDCGMClient) LinkGetLatestValues(arg0, arg1 uint, arg2 []dcgm.Short) ([]dcgm.FieldValue_v1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkGetLatestValues", arg0, arg1, arg2)
	ret0, _ := ret[0].([]dcgm.FieldValue_v1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LinkGetLatestValues indicates an expected call of LinkGetLatestValues.
func (mr *MockDCGMClientMockRecorder) LinkGetLatestValues(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkGetLatestValues", reflect.TypeOf((*MockDCGMClient)(nil).LinkGetLatestValues), arg0, arg1, arg2)
}

// NewDefaultGroup mocks base method.
func (m *MockDCGMClient) NewDefaultGroup(arg0 string) (dcgm.GroupHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDefaultGroup", arg0)
	ret0, _ := ret[0].(dcgm.GroupHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewDefaultGroup indicates an expected call of NewDefaultGroup.
func (mr *MockDCGMClientMockRecorder) NewDefaultGroup(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDefaultGroup", reflect.TypeOf((*MockDCGMClient)(nil).NewDefaultGroup), arg0)
}

// UpdateAllFields mocks base method.
func (m *MockDCGMClient) UpdateAllFields() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllFields")
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAllFields indicates an expected call of UpdateAllFields.
func (mr *MockDCGMClientMockRecorder) UpdateAllFields() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllFields", reflect.TypeOf((*MockDCGMClient)(nil).UpdateAllFields))
}

// WatchFieldsWithGroupEx mocks base method.
func (m *MockDCGMClient) WatchFieldsWithGroupEx(arg0 dcgm.FieldHandle, arg1 dcgm.GroupHandle, arg2 int64, arg3 float64, arg4 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchFieldsWithGroupEx", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// WatchFieldsWithGroupEx indicates an expected call of WatchFieldsWithGroupEx.
func (mr *MockDCGMClientMockRecorder) WatchFieldsWithGroupEx(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchFieldsWithGroupEx", reflect.TypeOf((*MockDCGMClient)(nil).WatchFieldsWithGroupEx), arg0, arg1, arg2, arg3, arg4)
}
