// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NVIDIA/dcgm-exporter/pkg/dcgmexporter/sysinfo (interfaces: SystemInfoInterface)
//
// Generated by this command:
//
//	mockgen -destination=mocks/pkg/dcgmexporter/sysinfo/mock_system_info.go github.com/NVIDIA/dcgm-exporter/pkg/dcgmexporter/sysinfo SystemInfoInterface
//

// Package mock_sysinfo is a generated GoMock package.
package mock_sysinfo

import (
	reflect "reflect"

	common "github.com/NVIDIA/dcgm-exporter/pkg/common"
	sysinfo "github.com/NVIDIA/dcgm-exporter/pkg/dcgmexporter/sysinfo"
	dcgm "github.com/NVIDIA/go-dcgm/pkg/dcgm"
	gomock "go.uber.org/mock/gomock"
)

// MockSystemInfoInterface is a mock of SystemInfoInterface interface.
type MockSystemInfoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSystemInfoInterfaceMockRecorder
}

// MockSystemInfoInterfaceMockRecorder is the mock recorder for MockSystemInfoInterface.
type MockSystemInfoInterfaceMockRecorder struct {
	mock *MockSystemInfoInterface
}

// NewMockSystemInfoInterface creates a new mock instance.
func NewMockSystemInfoInterface(ctrl *gomock.Controller) *MockSystemInfoInterface {
	mock := &MockSystemInfoInterface{ctrl: ctrl}
	mock.recorder = &MockSystemInfoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSystemInfoInterface) EXPECT() *MockSystemInfoInterfaceMockRecorder {
	return m.recorder
}

// COpts mocks base method.
func (m *MockSystemInfoInterface) COpts() common.DeviceOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "COpts")
	ret0, _ := ret[0].(common.DeviceOptions)
	return ret0
}

// COpts indicates an expected call of COpts.
func (mr *MockSystemInfoInterfaceMockRecorder) COpts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "COpts", reflect.TypeOf((*MockSystemInfoInterface)(nil).COpts))
}

// CPU mocks base method.
func (m *MockSystemInfoInterface) CPU(arg0 uint) sysinfo.CPUInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CPU", arg0)
	ret0, _ := ret[0].(sysinfo.CPUInfo)
	return ret0
}

// CPU indicates an expected call of CPU.
func (mr *MockSystemInfoInterfaceMockRecorder) CPU(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CPU", reflect.TypeOf((*MockSystemInfoInterface)(nil).CPU), arg0)
}

// CPUCoreIdExists mocks base method.
func (m *MockSystemInfoInterface) CPUCoreIdExists(arg0 int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CPUCoreIdExists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CPUCoreIdExists indicates an expected call of CPUCoreIdExists.
func (mr *MockSystemInfoInterfaceMockRecorder) CPUCoreIdExists(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CPUCoreIdExists", reflect.TypeOf((*MockSystemInfoInterface)(nil).CPUCoreIdExists), arg0)
}

// CPUIdExists mocks base method.
func (m *MockSystemInfoInterface) CPUIdExists(arg0 int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CPUIdExists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CPUIdExists indicates an expected call of CPUIdExists.
func (mr *MockSystemInfoInterfaceMockRecorder) CPUIdExists(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CPUIdExists", reflect.TypeOf((*MockSystemInfoInterface)(nil).CPUIdExists), arg0)
}

// CPUs mocks base method.
func (m *MockSystemInfoInterface) CPUs() []sysinfo.CPUInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CPUs")
	ret0, _ := ret[0].([]sysinfo.CPUInfo)
	return ret0
}

// CPUs indicates an expected call of CPUs.
func (mr *MockSystemInfoInterfaceMockRecorder) CPUs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CPUs", reflect.TypeOf((*MockSystemInfoInterface)(nil).CPUs))
}

// GOpts mocks base method.
func (m *MockSystemInfoInterface) GOpts() common.DeviceOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GOpts")
	ret0, _ := ret[0].(common.DeviceOptions)
	return ret0
}

// GOpts indicates an expected call of GOpts.
func (mr *MockSystemInfoInterfaceMockRecorder) GOpts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GOpts", reflect.TypeOf((*MockSystemInfoInterface)(nil).GOpts))
}

// GPU mocks base method.
func (m *MockSystemInfoInterface) GPU(arg0 uint) sysinfo.GPUInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GPU", arg0)
	ret0, _ := ret[0].(sysinfo.GPUInfo)
	return ret0
}

// GPU indicates an expected call of GPU.
func (mr *MockSystemInfoInterfaceMockRecorder) GPU(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GPU", reflect.TypeOf((*MockSystemInfoInterface)(nil).GPU), arg0)
}

// GPUCount mocks base method.
func (m *MockSystemInfoInterface) GPUCount() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GPUCount")
	ret0, _ := ret[0].(uint)
	return ret0
}

// GPUCount indicates an expected call of GPUCount.
func (mr *MockSystemInfoInterfaceMockRecorder) GPUCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GPUCount", reflect.TypeOf((*MockSystemInfoInterface)(nil).GPUCount))
}

// GPUIdExists mocks base method.
func (m *MockSystemInfoInterface) GPUIdExists(arg0 int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GPUIdExists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GPUIdExists indicates an expected call of GPUIdExists.
func (mr *MockSystemInfoInterfaceMockRecorder) GPUIdExists(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GPUIdExists", reflect.TypeOf((*MockSystemInfoInterface)(nil).GPUIdExists), arg0)
}

// GPUInstanceIdExists mocks base method.
func (m *MockSystemInfoInterface) GPUInstanceIdExists(arg0 int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GPUInstanceIdExists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GPUInstanceIdExists indicates an expected call of GPUInstanceIdExists.
func (mr *MockSystemInfoInterfaceMockRecorder) GPUInstanceIdExists(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GPUInstanceIdExists", reflect.TypeOf((*MockSystemInfoInterface)(nil).GPUInstanceIdExists), arg0)
}

// GPUs mocks base method.
func (m *MockSystemInfoInterface) GPUs() []sysinfo.GPUInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GPUs")
	ret0, _ := ret[0].([]sysinfo.GPUInfo)
	return ret0
}

// GPUs indicates an expected call of GPUs.
func (mr *MockSystemInfoInterfaceMockRecorder) GPUs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GPUs", reflect.TypeOf((*MockSystemInfoInterface)(nil).GPUs))
}

// InfoType mocks base method.
func (m *MockSystemInfoInterface) InfoType() dcgm.Field_Entity_Group {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InfoType")
	ret0, _ := ret[0].(dcgm.Field_Entity_Group)
	return ret0
}

// InfoType indicates an expected call of InfoType.
func (mr *MockSystemInfoInterfaceMockRecorder) InfoType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfoType", reflect.TypeOf((*MockSystemInfoInterface)(nil).InfoType))
}

// InitializeCPUInfo mocks base method.
func (m *MockSystemInfoInterface) InitializeCPUInfo(arg0 common.DeviceOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeCPUInfo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitializeCPUInfo indicates an expected call of InitializeCPUInfo.
func (mr *MockSystemInfoInterfaceMockRecorder) InitializeCPUInfo(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeCPUInfo", reflect.TypeOf((*MockSystemInfoInterface)(nil).InitializeCPUInfo), arg0)
}

// InitializeGPUInfo mocks base method.
func (m *MockSystemInfoInterface) InitializeGPUInfo(arg0 common.DeviceOptions, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeGPUInfo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitializeGPUInfo indicates an expected call of InitializeGPUInfo.
func (mr *MockSystemInfoInterfaceMockRecorder) InitializeGPUInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeGPUInfo", reflect.TypeOf((*MockSystemInfoInterface)(nil).InitializeGPUInfo), arg0, arg1)
}

// InitializeNvSwitchInfo mocks base method.
func (m *MockSystemInfoInterface) InitializeNvSwitchInfo(arg0 common.DeviceOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeNvSwitchInfo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitializeNvSwitchInfo indicates an expected call of InitializeNvSwitchInfo.
func (mr *MockSystemInfoInterfaceMockRecorder) InitializeNvSwitchInfo(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeNvSwitchInfo", reflect.TypeOf((*MockSystemInfoInterface)(nil).InitializeNvSwitchInfo), arg0)
}

// IsCPUWatched mocks base method.
func (m *MockSystemInfoInterface) IsCPUWatched(arg0 uint) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCPUWatched", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsCPUWatched indicates an expected call of IsCPUWatched.
func (mr *MockSystemInfoInterfaceMockRecorder) IsCPUWatched(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCPUWatched", reflect.TypeOf((*MockSystemInfoInterface)(nil).IsCPUWatched), arg0)
}

// IsCoreWatched mocks base method.
func (m *MockSystemInfoInterface) IsCoreWatched(arg0, arg1 uint) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCoreWatched", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsCoreWatched indicates an expected call of IsCoreWatched.
func (mr *MockSystemInfoInterfaceMockRecorder) IsCoreWatched(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCoreWatched", reflect.TypeOf((*MockSystemInfoInterface)(nil).IsCoreWatched), arg0, arg1)
}

// IsLinkWatched mocks base method.
func (m *MockSystemInfoInterface) IsLinkWatched(arg0, arg1 uint) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLinkWatched", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLinkWatched indicates an expected call of IsLinkWatched.
func (mr *MockSystemInfoInterfaceMockRecorder) IsLinkWatched(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLinkWatched", reflect.TypeOf((*MockSystemInfoInterface)(nil).IsLinkWatched), arg0, arg1)
}

// IsSwitchWatched mocks base method.
func (m *MockSystemInfoInterface) IsSwitchWatched(arg0 uint) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSwitchWatched", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSwitchWatched indicates an expected call of IsSwitchWatched.
func (mr *MockSystemInfoInterfaceMockRecorder) IsSwitchWatched(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSwitchWatched", reflect.TypeOf((*MockSystemInfoInterface)(nil).IsSwitchWatched), arg0)
}

// LinkIdExists mocks base method.
func (m *MockSystemInfoInterface) LinkIdExists(arg0 int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkIdExists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// LinkIdExists indicates an expected call of LinkIdExists.
func (mr *MockSystemInfoInterfaceMockRecorder) LinkIdExists(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkIdExists", reflect.TypeOf((*MockSystemInfoInterface)(nil).LinkIdExists), arg0)
}

// PopulateMigProfileNames mocks base method.
func (m *MockSystemInfoInterface) PopulateMigProfileNames(arg0 []dcgm.GroupEntityPair) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PopulateMigProfileNames", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PopulateMigProfileNames indicates an expected call of PopulateMigProfileNames.
func (mr *MockSystemInfoInterfaceMockRecorder) PopulateMigProfileNames(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopulateMigProfileNames", reflect.TypeOf((*MockSystemInfoInterface)(nil).PopulateMigProfileNames), arg0)
}

// SOpts mocks base method.
func (m *MockSystemInfoInterface) SOpts() common.DeviceOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SOpts")
	ret0, _ := ret[0].(common.DeviceOptions)
	return ret0
}

// SOpts indicates an expected call of SOpts.
func (mr *MockSystemInfoInterfaceMockRecorder) SOpts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SOpts", reflect.TypeOf((*MockSystemInfoInterface)(nil).SOpts))
}

// SetGPUInstanceProfileName mocks base method.
func (m *MockSystemInfoInterface) SetGPUInstanceProfileName(arg0 uint, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGPUInstanceProfileName", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SetGPUInstanceProfileName indicates an expected call of SetGPUInstanceProfileName.
func (mr *MockSystemInfoInterfaceMockRecorder) SetGPUInstanceProfileName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGPUInstanceProfileName", reflect.TypeOf((*MockSystemInfoInterface)(nil).SetGPUInstanceProfileName), arg0, arg1)
}

// SetMigProfileNames mocks base method.
func (m *MockSystemInfoInterface) SetMigProfileNames(arg0 []dcgm.FieldValue_v2) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMigProfileNames", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMigProfileNames indicates an expected call of SetMigProfileNames.
func (mr *MockSystemInfoInterfaceMockRecorder) SetMigProfileNames(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMigProfileNames", reflect.TypeOf((*MockSystemInfoInterface)(nil).SetMigProfileNames), arg0)
}

// Switch mocks base method.
func (m *MockSystemInfoInterface) Switch(arg0 uint) sysinfo.SwitchInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Switch", arg0)
	ret0, _ := ret[0].(sysinfo.SwitchInfo)
	return ret0
}

// Switch indicates an expected call of Switch.
func (mr *MockSystemInfoInterfaceMockRecorder) Switch(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Switch", reflect.TypeOf((*MockSystemInfoInterface)(nil).Switch), arg0)
}

// SwitchIdExists mocks base method.
func (m *MockSystemInfoInterface) SwitchIdExists(arg0 int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwitchIdExists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SwitchIdExists indicates an expected call of SwitchIdExists.
func (mr *MockSystemInfoInterfaceMockRecorder) SwitchIdExists(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwitchIdExists", reflect.TypeOf((*MockSystemInfoInterface)(nil).SwitchIdExists), arg0)
}

// Switches mocks base method.
func (m *MockSystemInfoInterface) Switches() []sysinfo.SwitchInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Switches")
	ret0, _ := ret[0].([]sysinfo.SwitchInfo)
	return ret0
}

// Switches indicates an expected call of Switches.
func (mr *MockSystemInfoInterfaceMockRecorder) Switches() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Switches", reflect.TypeOf((*MockSystemInfoInterface)(nil).Switches))
}

// VerifyCPUDevicePresence mocks base method.
func (m *MockSystemInfoInterface) VerifyCPUDevicePresence(arg0 common.DeviceOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyCPUDevicePresence", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyCPUDevicePresence indicates an expected call of VerifyCPUDevicePresence.
func (mr *MockSystemInfoInterfaceMockRecorder) VerifyCPUDevicePresence(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyCPUDevicePresence", reflect.TypeOf((*MockSystemInfoInterface)(nil).VerifyCPUDevicePresence), arg0)
}

// VerifyDevicePresence mocks base method.
func (m *MockSystemInfoInterface) VerifyDevicePresence(arg0 common.DeviceOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyDevicePresence", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyDevicePresence indicates an expected call of VerifyDevicePresence.
func (mr *MockSystemInfoInterfaceMockRecorder) VerifyDevicePresence(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyDevicePresence", reflect.TypeOf((*MockSystemInfoInterface)(nil).VerifyDevicePresence), arg0)
}

// VerifySwitchDevicePresence mocks base method.
func (m *MockSystemInfoInterface) VerifySwitchDevicePresence(arg0 common.DeviceOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifySwitchDevicePresence", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifySwitchDevicePresence indicates an expected call of VerifySwitchDevicePresence.
func (mr *MockSystemInfoInterfaceMockRecorder) VerifySwitchDevicePresence(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifySwitchDevicePresence", reflect.TypeOf((*MockSystemInfoInterface)(nil).VerifySwitchDevicePresence), arg0)
}
